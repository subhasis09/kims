/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/qr.js";
exports.ids = ["vendor-chunks/qr.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/qr.js/lib/8BitByte.js":
/*!********************************************!*\
  !*** ./node_modules/qr.js/lib/8BitByte.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/qr.js/lib/mode.js\");\nfunction QR8bitByte(data) {\n  this.mode = mode.MODE_8BIT_BYTE;\n  this.data = data;\n}\nQR8bitByte.prototype = {\n  getLength: function (buffer) {\n    return this.data.length;\n  },\n  write: function (buffer) {\n    for (var i = 0; i < this.data.length; i++) {\n      // not JIS ...\n      buffer.put(this.data.charCodeAt(i), 8);\n    }\n  }\n};\nmodule.exports = QR8bitByte;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXIuanMvbGliLzhCaXRCeXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxzREFBUSxDQUFDO0FBRTVCLFNBQVNDLFVBQVVBLENBQUNDLElBQUksRUFBRTtFQUN6QixJQUFJLENBQUNILElBQUksR0FBR0EsSUFBSSxDQUFDSSxjQUFjO0VBQy9CLElBQUksQ0FBQ0QsSUFBSSxHQUFHQSxJQUFJO0FBQ2pCO0FBRUFELFVBQVUsQ0FBQ0csU0FBUyxHQUFHO0VBRXRCQyxTQUFTLEVBQUcsU0FBQUEsQ0FBU0MsTUFBTSxFQUFFO0lBQzVCLE9BQU8sSUFBSSxDQUFDSixJQUFJLENBQUNLLE1BQU07RUFDeEIsQ0FBQztFQUVEQyxLQUFLLEVBQUcsU0FBQUEsQ0FBU0YsTUFBTSxFQUFFO0lBQ3hCLEtBQUssSUFBSUcsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLElBQUksQ0FBQ1AsSUFBSSxDQUFDSyxNQUFNLEVBQUVFLENBQUMsRUFBRSxFQUFFO01BQzFDO01BQ0FILE1BQU0sQ0FBQ0ksR0FBRyxDQUFDLElBQUksQ0FBQ1IsSUFBSSxDQUFDUyxVQUFVLENBQUNGLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QztFQUNEO0FBQ0QsQ0FBQztBQUVERyxNQUFNLENBQUNDLE9BQU8sR0FBR1osVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2tpaW1zLWtpb3NrLy4vbm9kZV9tb2R1bGVzL3FyLmpzL2xpYi84Qml0Qnl0ZS5qcz8wMzQ3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBtb2RlID0gcmVxdWlyZSgnLi9tb2RlJyk7XG5cbmZ1bmN0aW9uIFFSOGJpdEJ5dGUoZGF0YSkge1xuXHR0aGlzLm1vZGUgPSBtb2RlLk1PREVfOEJJVF9CWVRFO1xuXHR0aGlzLmRhdGEgPSBkYXRhO1xufVxuXG5RUjhiaXRCeXRlLnByb3RvdHlwZSA9IHtcblxuXHRnZXRMZW5ndGggOiBmdW5jdGlvbihidWZmZXIpIHtcblx0XHRyZXR1cm4gdGhpcy5kYXRhLmxlbmd0aDtcblx0fSxcblx0XG5cdHdyaXRlIDogZnVuY3Rpb24oYnVmZmVyKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdC8vIG5vdCBKSVMgLi4uXG5cdFx0XHRidWZmZXIucHV0KHRoaXMuZGF0YS5jaGFyQ29kZUF0KGkpLCA4KTtcblx0XHR9XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUVI4Yml0Qnl0ZTtcblxuIl0sIm5hbWVzIjpbIm1vZGUiLCJyZXF1aXJlIiwiUVI4Yml0Qnl0ZSIsImRhdGEiLCJNT0RFXzhCSVRfQllURSIsInByb3RvdHlwZSIsImdldExlbmd0aCIsImJ1ZmZlciIsImxlbmd0aCIsIndyaXRlIiwiaSIsInB1dCIsImNoYXJDb2RlQXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qr.js/lib/8BitByte.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qr.js/lib/BitBuffer.js":
/*!*********************************************!*\
  !*** ./node_modules/qr.js/lib/BitBuffer.js ***!
  \*********************************************/
/***/ ((module) => {

eval("function QRBitBuffer() {\n  this.buffer = new Array();\n  this.length = 0;\n}\nQRBitBuffer.prototype = {\n  get: function (index) {\n    var bufIndex = Math.floor(index / 8);\n    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n  },\n  put: function (num, length) {\n    for (var i = 0; i < length; i++) {\n      this.putBit((num >>> length - i - 1 & 1) == 1);\n    }\n  },\n  getLengthInBits: function () {\n    return this.length;\n  },\n  putBit: function (bit) {\n    var bufIndex = Math.floor(this.length / 8);\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0);\n    }\n    if (bit) {\n      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n    }\n    this.length++;\n  }\n};\nmodule.exports = QRBitBuffer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXIuanMvbGliL0JpdEJ1ZmZlci5qcyIsIm5hbWVzIjpbIlFSQml0QnVmZmVyIiwiYnVmZmVyIiwiQXJyYXkiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJnZXQiLCJpbmRleCIsImJ1ZkluZGV4IiwiTWF0aCIsImZsb29yIiwicHV0IiwibnVtIiwiaSIsInB1dEJpdCIsImdldExlbmd0aEluQml0cyIsImJpdCIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9raWltcy1raW9zay8uL25vZGVfbW9kdWxlcy9xci5qcy9saWIvQml0QnVmZmVyLmpzPzBlNzAiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gUVJCaXRCdWZmZXIoKSB7XG5cdHRoaXMuYnVmZmVyID0gbmV3IEFycmF5KCk7XG5cdHRoaXMubGVuZ3RoID0gMDtcbn1cblxuUVJCaXRCdWZmZXIucHJvdG90eXBlID0ge1xuXG5cdGdldCA6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIGJ1ZkluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIDgpO1xuXHRcdHJldHVybiAoICh0aGlzLmJ1ZmZlcltidWZJbmRleF0gPj4+ICg3IC0gaW5kZXggJSA4KSApICYgMSkgPT0gMTtcblx0fSxcblx0XG5cdHB1dCA6IGZ1bmN0aW9uKG51bSwgbGVuZ3RoKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5wdXRCaXQoICggKG51bSA+Pj4gKGxlbmd0aCAtIGkgLSAxKSApICYgMSkgPT0gMSk7XG5cdFx0fVxuXHR9LFxuXHRcblx0Z2V0TGVuZ3RoSW5CaXRzIDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubGVuZ3RoO1xuXHR9LFxuXHRcblx0cHV0Qml0IDogZnVuY3Rpb24oYml0KSB7XG5cdFxuXHRcdHZhciBidWZJbmRleCA9IE1hdGguZmxvb3IodGhpcy5sZW5ndGggLyA4KTtcblx0XHRpZiAodGhpcy5idWZmZXIubGVuZ3RoIDw9IGJ1ZkluZGV4KSB7XG5cdFx0XHR0aGlzLmJ1ZmZlci5wdXNoKDApO1xuXHRcdH1cblx0XG5cdFx0aWYgKGJpdCkge1xuXHRcdFx0dGhpcy5idWZmZXJbYnVmSW5kZXhdIHw9ICgweDgwID4+PiAodGhpcy5sZW5ndGggJSA4KSApO1xuXHRcdH1cblx0XG5cdFx0dGhpcy5sZW5ndGgrKztcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBRUkJpdEJ1ZmZlcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsV0FBV0EsQ0FBQSxFQUFHO0VBQ3RCLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlDLEtBQUssQ0FBQyxDQUFDO0VBQ3pCLElBQUksQ0FBQ0MsTUFBTSxHQUFHLENBQUM7QUFDaEI7QUFFQUgsV0FBVyxDQUFDSSxTQUFTLEdBQUc7RUFFdkJDLEdBQUcsRUFBRyxTQUFBQSxDQUFTQyxLQUFLLEVBQUU7SUFDckIsSUFBSUMsUUFBUSxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0gsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNwQyxPQUFPLENBQUcsSUFBSSxDQUFDTCxNQUFNLENBQUNNLFFBQVEsQ0FBQyxLQUFNLENBQUMsR0FBR0QsS0FBSyxHQUFHLENBQUUsR0FBSyxDQUFDLEtBQUssQ0FBQztFQUNoRSxDQUFDO0VBRURJLEdBQUcsRUFBRyxTQUFBQSxDQUFTQyxHQUFHLEVBQUVSLE1BQU0sRUFBRTtJQUMzQixLQUFLLElBQUlTLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR1QsTUFBTSxFQUFFUyxDQUFDLEVBQUUsRUFBRTtNQUNoQyxJQUFJLENBQUNDLE1BQU0sQ0FBRSxDQUFHRixHQUFHLEtBQU1SLE1BQU0sR0FBR1MsQ0FBQyxHQUFHLENBQUUsR0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3REO0VBQ0QsQ0FBQztFQUVERSxlQUFlLEVBQUcsU0FBQUEsQ0FBQSxFQUFXO0lBQzVCLE9BQU8sSUFBSSxDQUFDWCxNQUFNO0VBQ25CLENBQUM7RUFFRFUsTUFBTSxFQUFHLFNBQUFBLENBQVNFLEdBQUcsRUFBRTtJQUV0QixJQUFJUixRQUFRLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQ04sTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMxQyxJQUFJLElBQUksQ0FBQ0YsTUFBTSxDQUFDRSxNQUFNLElBQUlJLFFBQVEsRUFBRTtNQUNuQyxJQUFJLENBQUNOLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNwQjtJQUVBLElBQUlELEdBQUcsRUFBRTtNQUNSLElBQUksQ0FBQ2QsTUFBTSxDQUFDTSxRQUFRLENBQUMsSUFBSyxJQUFJLEtBQU0sSUFBSSxDQUFDSixNQUFNLEdBQUcsQ0FBSTtJQUN2RDtJQUVBLElBQUksQ0FBQ0EsTUFBTSxFQUFFO0VBQ2Q7QUFDRCxDQUFDO0FBRURjLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHbEIsV0FBVyJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qr.js/lib/BitBuffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qr.js/lib/ErrorCorrectLevel.js":
/*!*****************************************************!*\
  !*** ./node_modules/qr.js/lib/ErrorCorrectLevel.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("module.exports = {\n  L: 1,\n  M: 0,\n  Q: 3,\n  H: 2\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXIuanMvbGliL0Vycm9yQ29ycmVjdExldmVsLmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkwiLCJNIiwiUSIsIkgiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL2tpaW1zLWtpb3NrLy4vbm9kZV9tb2R1bGVzL3FyLmpzL2xpYi9FcnJvckNvcnJlY3RMZXZlbC5qcz9jMDUzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuXHRMIDogMSxcblx0TSA6IDAsXG5cdFEgOiAzLFxuXHRIIDogMlxufTtcblxuIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDaEJDLENBQUMsRUFBRyxDQUFDO0VBQ0xDLENBQUMsRUFBRyxDQUFDO0VBQ0xDLENBQUMsRUFBRyxDQUFDO0VBQ0xDLENBQUMsRUFBRztBQUNMLENBQUMifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qr.js/lib/ErrorCorrectLevel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qr.js/lib/Polynomial.js":
/*!**********************************************!*\
  !*** ./node_modules/qr.js/lib/Polynomial.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var math = __webpack_require__(/*! ./math */ \"(ssr)/./node_modules/qr.js/lib/math.js\");\nfunction QRPolynomial(num, shift) {\n  if (num.length == undefined) {\n    throw new Error(num.length + \"/\" + shift);\n  }\n  var offset = 0;\n  while (offset < num.length && num[offset] == 0) {\n    offset++;\n  }\n  this.num = new Array(num.length - offset + shift);\n  for (var i = 0; i < num.length - offset; i++) {\n    this.num[i] = num[i + offset];\n  }\n}\nQRPolynomial.prototype = {\n  get: function (index) {\n    return this.num[index];\n  },\n  getLength: function () {\n    return this.num.length;\n  },\n  multiply: function (e) {\n    var num = new Array(this.getLength() + e.getLength() - 1);\n    for (var i = 0; i < this.getLength(); i++) {\n      for (var j = 0; j < e.getLength(); j++) {\n        num[i + j] ^= math.gexp(math.glog(this.get(i)) + math.glog(e.get(j)));\n      }\n    }\n    return new QRPolynomial(num, 0);\n  },\n  mod: function (e) {\n    if (this.getLength() - e.getLength() < 0) {\n      return this;\n    }\n    var ratio = math.glog(this.get(0)) - math.glog(e.get(0));\n    var num = new Array(this.getLength());\n    for (var i = 0; i < this.getLength(); i++) {\n      num[i] = this.get(i);\n    }\n    for (var i = 0; i < e.getLength(); i++) {\n      num[i] ^= math.gexp(math.glog(e.get(i)) + ratio);\n    }\n\n    // recursive call\n    return new QRPolynomial(num, 0).mod(e);\n  }\n};\nmodule.exports = QRPolynomial;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXIuanMvbGliL1BvbHlub21pYWwuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLHNEQUFRLENBQUM7QUFFNUIsU0FBU0MsWUFBWUEsQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLEVBQUU7RUFFakMsSUFBSUQsR0FBRyxDQUFDRSxNQUFNLElBQUlDLFNBQVMsRUFBRTtJQUM1QixNQUFNLElBQUlDLEtBQUssQ0FBQ0osR0FBRyxDQUFDRSxNQUFNLEdBQUcsR0FBRyxHQUFHRCxLQUFLLENBQUM7RUFDMUM7RUFFQSxJQUFJSSxNQUFNLEdBQUcsQ0FBQztFQUVkLE9BQU9BLE1BQU0sR0FBR0wsR0FBRyxDQUFDRSxNQUFNLElBQUlGLEdBQUcsQ0FBQ0ssTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQy9DQSxNQUFNLEVBQUU7RUFDVDtFQUVBLElBQUksQ0FBQ0wsR0FBRyxHQUFHLElBQUlNLEtBQUssQ0FBQ04sR0FBRyxDQUFDRSxNQUFNLEdBQUdHLE1BQU0sR0FBR0osS0FBSyxDQUFDO0VBQ2pELEtBQUssSUFBSU0sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHUCxHQUFHLENBQUNFLE1BQU0sR0FBR0csTUFBTSxFQUFFRSxDQUFDLEVBQUUsRUFBRTtJQUM3QyxJQUFJLENBQUNQLEdBQUcsQ0FBQ08sQ0FBQyxDQUFDLEdBQUdQLEdBQUcsQ0FBQ08sQ0FBQyxHQUFHRixNQUFNLENBQUM7RUFDOUI7QUFDRDtBQUVBTixZQUFZLENBQUNTLFNBQVMsR0FBRztFQUV4QkMsR0FBRyxFQUFHLFNBQUFBLENBQVNDLEtBQUssRUFBRTtJQUNyQixPQUFPLElBQUksQ0FBQ1YsR0FBRyxDQUFDVSxLQUFLLENBQUM7RUFDdkIsQ0FBQztFQUVEQyxTQUFTLEVBQUcsU0FBQUEsQ0FBQSxFQUFXO0lBQ3RCLE9BQU8sSUFBSSxDQUFDWCxHQUFHLENBQUNFLE1BQU07RUFDdkIsQ0FBQztFQUVEVSxRQUFRLEVBQUcsU0FBQUEsQ0FBU0MsQ0FBQyxFQUFFO0lBRXRCLElBQUliLEdBQUcsR0FBRyxJQUFJTSxLQUFLLENBQUMsSUFBSSxDQUFDSyxTQUFTLENBQUMsQ0FBQyxHQUFHRSxDQUFDLENBQUNGLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXpELEtBQUssSUFBSUosQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLElBQUksQ0FBQ0ksU0FBUyxDQUFDLENBQUMsRUFBRUosQ0FBQyxFQUFFLEVBQUU7TUFDMUMsS0FBSyxJQUFJTyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdELENBQUMsQ0FBQ0YsU0FBUyxDQUFDLENBQUMsRUFBRUcsQ0FBQyxFQUFFLEVBQUU7UUFDdkNkLEdBQUcsQ0FBQ08sQ0FBQyxHQUFHTyxDQUFDLENBQUMsSUFBSWpCLElBQUksQ0FBQ2tCLElBQUksQ0FBQ2xCLElBQUksQ0FBQ21CLElBQUksQ0FBQyxJQUFJLENBQUNQLEdBQUcsQ0FBQ0YsQ0FBQyxDQUFFLENBQUMsR0FBR1YsSUFBSSxDQUFDbUIsSUFBSSxDQUFDSCxDQUFDLENBQUNKLEdBQUcsQ0FBQ0ssQ0FBQyxDQUFFLENBQUUsQ0FBQztNQUN6RTtJQUNEO0lBRUEsT0FBTyxJQUFJZixZQUFZLENBQUNDLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDaEMsQ0FBQztFQUVEaUIsR0FBRyxFQUFHLFNBQUFBLENBQVNKLENBQUMsRUFBRTtJQUVqQixJQUFJLElBQUksQ0FBQ0YsU0FBUyxDQUFDLENBQUMsR0FBR0UsQ0FBQyxDQUFDRixTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtNQUN6QyxPQUFPLElBQUk7SUFDWjtJQUVBLElBQUlPLEtBQUssR0FBR3JCLElBQUksQ0FBQ21CLElBQUksQ0FBQyxJQUFJLENBQUNQLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQyxHQUFHWixJQUFJLENBQUNtQixJQUFJLENBQUNILENBQUMsQ0FBQ0osR0FBRyxDQUFDLENBQUMsQ0FBRSxDQUFDO0lBRTFELElBQUlULEdBQUcsR0FBRyxJQUFJTSxLQUFLLENBQUMsSUFBSSxDQUFDSyxTQUFTLENBQUMsQ0FBRSxDQUFDO0lBRXRDLEtBQUssSUFBSUosQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLElBQUksQ0FBQ0ksU0FBUyxDQUFDLENBQUMsRUFBRUosQ0FBQyxFQUFFLEVBQUU7TUFDMUNQLEdBQUcsQ0FBQ08sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDRSxHQUFHLENBQUNGLENBQUMsQ0FBQztJQUNyQjtJQUVBLEtBQUssSUFBSUEsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTSxDQUFDLENBQUNGLFNBQVMsQ0FBQyxDQUFDLEVBQUVKLENBQUMsRUFBRSxFQUFFO01BQ3ZDUCxHQUFHLENBQUNPLENBQUMsQ0FBQyxJQUFJVixJQUFJLENBQUNrQixJQUFJLENBQUNsQixJQUFJLENBQUNtQixJQUFJLENBQUNILENBQUMsQ0FBQ0osR0FBRyxDQUFDRixDQUFDLENBQUUsQ0FBQyxHQUFHVyxLQUFLLENBQUM7SUFDbEQ7O0lBRUE7SUFDQSxPQUFPLElBQUluQixZQUFZLENBQUNDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQ2lCLEdBQUcsQ0FBQ0osQ0FBQyxDQUFDO0VBQ3ZDO0FBQ0QsQ0FBQztBQUVETSxNQUFNLENBQUNDLE9BQU8sR0FBR3JCLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9raWltcy1raW9zay8uL25vZGVfbW9kdWxlcy9xci5qcy9saWIvUG9seW5vbWlhbC5qcz8wMDhlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBtYXRoID0gcmVxdWlyZSgnLi9tYXRoJyk7XG5cbmZ1bmN0aW9uIFFSUG9seW5vbWlhbChudW0sIHNoaWZ0KSB7XG5cblx0aWYgKG51bS5sZW5ndGggPT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKG51bS5sZW5ndGggKyBcIi9cIiArIHNoaWZ0KTtcblx0fVxuXG5cdHZhciBvZmZzZXQgPSAwO1xuXG5cdHdoaWxlIChvZmZzZXQgPCBudW0ubGVuZ3RoICYmIG51bVtvZmZzZXRdID09IDApIHtcblx0XHRvZmZzZXQrKztcblx0fVxuXG5cdHRoaXMubnVtID0gbmV3IEFycmF5KG51bS5sZW5ndGggLSBvZmZzZXQgKyBzaGlmdCk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aCAtIG9mZnNldDsgaSsrKSB7XG5cdFx0dGhpcy5udW1baV0gPSBudW1baSArIG9mZnNldF07XG5cdH1cbn1cblxuUVJQb2x5bm9taWFsLnByb3RvdHlwZSA9IHtcblxuXHRnZXQgOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHJldHVybiB0aGlzLm51bVtpbmRleF07XG5cdH0sXG5cdFxuXHRnZXRMZW5ndGggOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5udW0ubGVuZ3RoO1xuXHR9LFxuXHRcblx0bXVsdGlwbHkgOiBmdW5jdGlvbihlKSB7XG5cdFxuXHRcdHZhciBudW0gPSBuZXcgQXJyYXkodGhpcy5nZXRMZW5ndGgoKSArIGUuZ2V0TGVuZ3RoKCkgLSAxKTtcblx0XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdldExlbmd0aCgpOyBpKyspIHtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZS5nZXRMZW5ndGgoKTsgaisrKSB7XG5cdFx0XHRcdG51bVtpICsgal0gXj0gbWF0aC5nZXhwKG1hdGguZ2xvZyh0aGlzLmdldChpKSApICsgbWF0aC5nbG9nKGUuZ2V0KGopICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiBuZXcgUVJQb2x5bm9taWFsKG51bSwgMCk7XG5cdH0sXG5cdFxuXHRtb2QgOiBmdW5jdGlvbihlKSB7XG5cdFxuXHRcdGlmICh0aGlzLmdldExlbmd0aCgpIC0gZS5nZXRMZW5ndGgoKSA8IDApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XG5cdFx0dmFyIHJhdGlvID0gbWF0aC5nbG9nKHRoaXMuZ2V0KDApICkgLSBtYXRoLmdsb2coZS5nZXQoMCkgKTtcblx0XG5cdFx0dmFyIG51bSA9IG5ldyBBcnJheSh0aGlzLmdldExlbmd0aCgpICk7XG5cdFx0XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdldExlbmd0aCgpOyBpKyspIHtcblx0XHRcdG51bVtpXSA9IHRoaXMuZ2V0KGkpO1xuXHRcdH1cblx0XHRcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGUuZ2V0TGVuZ3RoKCk7IGkrKykge1xuXHRcdFx0bnVtW2ldIF49IG1hdGguZ2V4cChtYXRoLmdsb2coZS5nZXQoaSkgKSArIHJhdGlvKTtcblx0XHR9XG5cdFxuXHRcdC8vIHJlY3Vyc2l2ZSBjYWxsXG5cdFx0cmV0dXJuIG5ldyBRUlBvbHlub21pYWwobnVtLCAwKS5tb2QoZSk7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUVJQb2x5bm9taWFsO1xuIl0sIm5hbWVzIjpbIm1hdGgiLCJyZXF1aXJlIiwiUVJQb2x5bm9taWFsIiwibnVtIiwic2hpZnQiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJFcnJvciIsIm9mZnNldCIsIkFycmF5IiwiaSIsInByb3RvdHlwZSIsImdldCIsImluZGV4IiwiZ2V0TGVuZ3RoIiwibXVsdGlwbHkiLCJlIiwiaiIsImdleHAiLCJnbG9nIiwibW9kIiwicmF0aW8iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qr.js/lib/Polynomial.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qr.js/lib/QRCode.js":
/*!******************************************!*\
  !*** ./node_modules/qr.js/lib/QRCode.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var BitByte = __webpack_require__(/*! ./8BitByte */ \"(ssr)/./node_modules/qr.js/lib/8BitByte.js\");\nvar RSBlock = __webpack_require__(/*! ./RSBlock */ \"(ssr)/./node_modules/qr.js/lib/RSBlock.js\");\nvar BitBuffer = __webpack_require__(/*! ./BitBuffer */ \"(ssr)/./node_modules/qr.js/lib/BitBuffer.js\");\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/qr.js/lib/util.js\");\nvar Polynomial = __webpack_require__(/*! ./Polynomial */ \"(ssr)/./node_modules/qr.js/lib/Polynomial.js\");\nfunction QRCode(typeNumber, errorCorrectLevel) {\n  this.typeNumber = typeNumber;\n  this.errorCorrectLevel = errorCorrectLevel;\n  this.modules = null;\n  this.moduleCount = 0;\n  this.dataCache = null;\n  this.dataList = [];\n}\n\n// for client side minification\nvar proto = QRCode.prototype;\nproto.addData = function (data) {\n  var newData = new BitByte(data);\n  this.dataList.push(newData);\n  this.dataCache = null;\n};\nproto.isDark = function (row, col) {\n  if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n    throw new Error(row + \",\" + col);\n  }\n  return this.modules[row][col];\n};\nproto.getModuleCount = function () {\n  return this.moduleCount;\n};\nproto.make = function () {\n  // Calculate automatically typeNumber if provided is < 1\n  if (this.typeNumber < 1) {\n    var typeNumber = 1;\n    for (typeNumber = 1; typeNumber < 40; typeNumber++) {\n      var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\n      var buffer = new BitBuffer();\n      var totalDataCount = 0;\n      for (var i = 0; i < rsBlocks.length; i++) {\n        totalDataCount += rsBlocks[i].dataCount;\n      }\n      for (var i = 0; i < this.dataList.length; i++) {\n        var data = this.dataList[i];\n        buffer.put(data.mode, 4);\n        buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n        data.write(buffer);\n      }\n      if (buffer.getLengthInBits() <= totalDataCount * 8) break;\n    }\n    this.typeNumber = typeNumber;\n  }\n  this.makeImpl(false, this.getBestMaskPattern());\n};\nproto.makeImpl = function (test, maskPattern) {\n  this.moduleCount = this.typeNumber * 4 + 17;\n  this.modules = new Array(this.moduleCount);\n  for (var row = 0; row < this.moduleCount; row++) {\n    this.modules[row] = new Array(this.moduleCount);\n    for (var col = 0; col < this.moduleCount; col++) {\n      this.modules[row][col] = null; //(col + row) % 3;\n    }\n  }\n\n  this.setupPositionProbePattern(0, 0);\n  this.setupPositionProbePattern(this.moduleCount - 7, 0);\n  this.setupPositionProbePattern(0, this.moduleCount - 7);\n  this.setupPositionAdjustPattern();\n  this.setupTimingPattern();\n  this.setupTypeInfo(test, maskPattern);\n  if (this.typeNumber >= 7) {\n    this.setupTypeNumber(test);\n  }\n  if (this.dataCache == null) {\n    this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n  }\n  this.mapData(this.dataCache, maskPattern);\n};\nproto.setupPositionProbePattern = function (row, col) {\n  for (var r = -1; r <= 7; r++) {\n    if (row + r <= -1 || this.moduleCount <= row + r) continue;\n    for (var c = -1; c <= 7; c++) {\n      if (col + c <= -1 || this.moduleCount <= col + c) continue;\n      if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n        this.modules[row + r][col + c] = true;\n      } else {\n        this.modules[row + r][col + c] = false;\n      }\n    }\n  }\n};\nproto.getBestMaskPattern = function () {\n  var minLostPoint = 0;\n  var pattern = 0;\n  for (var i = 0; i < 8; i++) {\n    this.makeImpl(true, i);\n    var lostPoint = util.getLostPoint(this);\n    if (i == 0 || minLostPoint > lostPoint) {\n      minLostPoint = lostPoint;\n      pattern = i;\n    }\n  }\n  return pattern;\n};\nproto.createMovieClip = function (target_mc, instance_name, depth) {\n  var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n  var cs = 1;\n  this.make();\n  for (var row = 0; row < this.modules.length; row++) {\n    var y = row * cs;\n    for (var col = 0; col < this.modules[row].length; col++) {\n      var x = col * cs;\n      var dark = this.modules[row][col];\n      if (dark) {\n        qr_mc.beginFill(0, 100);\n        qr_mc.moveTo(x, y);\n        qr_mc.lineTo(x + cs, y);\n        qr_mc.lineTo(x + cs, y + cs);\n        qr_mc.lineTo(x, y + cs);\n        qr_mc.endFill();\n      }\n    }\n  }\n  return qr_mc;\n};\nproto.setupTimingPattern = function () {\n  for (var r = 8; r < this.moduleCount - 8; r++) {\n    if (this.modules[r][6] != null) {\n      continue;\n    }\n    this.modules[r][6] = r % 2 == 0;\n  }\n  for (var c = 8; c < this.moduleCount - 8; c++) {\n    if (this.modules[6][c] != null) {\n      continue;\n    }\n    this.modules[6][c] = c % 2 == 0;\n  }\n};\nproto.setupPositionAdjustPattern = function () {\n  var pos = util.getPatternPosition(this.typeNumber);\n  for (var i = 0; i < pos.length; i++) {\n    for (var j = 0; j < pos.length; j++) {\n      var row = pos[i];\n      var col = pos[j];\n      if (this.modules[row][col] != null) {\n        continue;\n      }\n      for (var r = -2; r <= 2; r++) {\n        for (var c = -2; c <= 2; c++) {\n          if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    }\n  }\n};\nproto.setupTypeNumber = function (test) {\n  var bits = util.getBCHTypeNumber(this.typeNumber);\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n  }\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n  }\n};\nproto.setupTypeInfo = function (test, maskPattern) {\n  var data = this.errorCorrectLevel << 3 | maskPattern;\n  var bits = util.getBCHTypeInfo(data);\n\n  // vertical\t\t\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    if (i < 6) {\n      this.modules[i][8] = mod;\n    } else if (i < 8) {\n      this.modules[i + 1][8] = mod;\n    } else {\n      this.modules[this.moduleCount - 15 + i][8] = mod;\n    }\n  }\n\n  // horizontal\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    if (i < 8) {\n      this.modules[8][this.moduleCount - i - 1] = mod;\n    } else if (i < 9) {\n      this.modules[8][15 - i - 1 + 1] = mod;\n    } else {\n      this.modules[8][15 - i - 1] = mod;\n    }\n  }\n\n  // fixed module\n  this.modules[this.moduleCount - 8][8] = !test;\n};\nproto.mapData = function (data, maskPattern) {\n  var inc = -1;\n  var row = this.moduleCount - 1;\n  var bitIndex = 7;\n  var byteIndex = 0;\n  for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n    if (col == 6) col--;\n    while (true) {\n      for (var c = 0; c < 2; c++) {\n        if (this.modules[row][col - c] == null) {\n          var dark = false;\n          if (byteIndex < data.length) {\n            dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n          }\n          var mask = util.getMask(maskPattern, row, col - c);\n          if (mask) {\n            dark = !dark;\n          }\n          this.modules[row][col - c] = dark;\n          bitIndex--;\n          if (bitIndex == -1) {\n            byteIndex++;\n            bitIndex = 7;\n          }\n        }\n      }\n      row += inc;\n      if (row < 0 || this.moduleCount <= row) {\n        row -= inc;\n        inc = -inc;\n        break;\n      }\n    }\n  }\n};\nQRCode.PAD0 = 0xEC;\nQRCode.PAD1 = 0x11;\nQRCode.createData = function (typeNumber, errorCorrectLevel, dataList) {\n  var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n  var buffer = new BitBuffer();\n  for (var i = 0; i < dataList.length; i++) {\n    var data = dataList[i];\n    buffer.put(data.mode, 4);\n    buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n    data.write(buffer);\n  }\n\n  // calc num max data.\n  var totalDataCount = 0;\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalDataCount += rsBlocks[i].dataCount;\n  }\n  if (buffer.getLengthInBits() > totalDataCount * 8) {\n    throw new Error(\"code length overflow. (\" + buffer.getLengthInBits() + \">\" + totalDataCount * 8 + \")\");\n  }\n\n  // end code\n  if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n    buffer.put(0, 4);\n  }\n\n  // padding\n  while (buffer.getLengthInBits() % 8 != 0) {\n    buffer.putBit(false);\n  }\n\n  // padding\n  while (true) {\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n    buffer.put(QRCode.PAD0, 8);\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n    buffer.put(QRCode.PAD1, 8);\n  }\n  return QRCode.createBytes(buffer, rsBlocks);\n};\nQRCode.createBytes = function (buffer, rsBlocks) {\n  var offset = 0;\n  var maxDcCount = 0;\n  var maxEcCount = 0;\n  var dcdata = new Array(rsBlocks.length);\n  var ecdata = new Array(rsBlocks.length);\n  for (var r = 0; r < rsBlocks.length; r++) {\n    var dcCount = rsBlocks[r].dataCount;\n    var ecCount = rsBlocks[r].totalCount - dcCount;\n    maxDcCount = Math.max(maxDcCount, dcCount);\n    maxEcCount = Math.max(maxEcCount, ecCount);\n    dcdata[r] = new Array(dcCount);\n    for (var i = 0; i < dcdata[r].length; i++) {\n      dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n    }\n    offset += dcCount;\n    var rsPoly = util.getErrorCorrectPolynomial(ecCount);\n    var rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);\n    var modPoly = rawPoly.mod(rsPoly);\n    ecdata[r] = new Array(rsPoly.getLength() - 1);\n    for (var i = 0; i < ecdata[r].length; i++) {\n      var modIndex = i + modPoly.getLength() - ecdata[r].length;\n      ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n    }\n  }\n  var totalCodeCount = 0;\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalCodeCount += rsBlocks[i].totalCount;\n  }\n  var data = new Array(totalCodeCount);\n  var index = 0;\n  for (var i = 0; i < maxDcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < dcdata[r].length) {\n        data[index++] = dcdata[r][i];\n      }\n    }\n  }\n  for (var i = 0; i < maxEcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < ecdata[r].length) {\n        data[index++] = ecdata[r][i];\n      }\n    }\n  }\n  return data;\n};\nmodule.exports = QRCode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qr.js/lib/QRCode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qr.js/lib/RSBlock.js":
/*!*******************************************!*\
  !*** ./node_modules/qr.js/lib/RSBlock.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// ErrorCorrectLevel\nvar ECL = __webpack_require__(/*! ./ErrorCorrectLevel */ \"(ssr)/./node_modules/qr.js/lib/ErrorCorrectLevel.js\");\nfunction QRRSBlock(totalCount, dataCount) {\n  this.totalCount = totalCount;\n  this.dataCount = dataCount;\n}\nQRRSBlock.RS_BLOCK_TABLE = [\n// L\n// M\n// Q\n// H\n\n// 1\n[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9],\n// 2\n[1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16],\n// 3\n[1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13],\n// 4\t\t\n[1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9],\n// 5\n[1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12],\n// 6\n[2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15],\n// 7\t\t\n[2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14],\n// 8\n[2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15],\n// 9\n[2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13],\n// 10\t\t\n[2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16],\n// 11\n[4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13],\n// 12\n[2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15],\n// 13\n[4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12],\n// 14\n[3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13],\n// 15\n[5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12],\n// 16\n[5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16],\n// 17\n[1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15],\n// 18\n[5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15],\n// 19\n[3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14],\n// 20\n[3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16],\n// 21\n[4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17],\n// 22\n[2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13],\n// 23\n[4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16],\n// 24\n[6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17],\n// 25\n[8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16],\n// 26\n[10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17],\n// 27\n[8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16],\n// 28\n[3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16],\n// 29\n[7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16],\n// 30\n[5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16],\n// 31\n[13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16],\n// 32\n[17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16],\n// 33\n[17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16],\n// 34\n[13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17],\n// 35\n[12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16],\n// 36\n[6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16],\n// 37\n[17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16],\n// 38\n[4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16],\n// 39\n[20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16],\n// 40\n[19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\nQRRSBlock.getRSBlocks = function (typeNumber, errorCorrectLevel) {\n  var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n  if (rsBlock == undefined) {\n    throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + errorCorrectLevel);\n  }\n  var length = rsBlock.length / 3;\n  var list = new Array();\n  for (var i = 0; i < length; i++) {\n    var count = rsBlock[i * 3 + 0];\n    var totalCount = rsBlock[i * 3 + 1];\n    var dataCount = rsBlock[i * 3 + 2];\n    for (var j = 0; j < count; j++) {\n      list.push(new QRRSBlock(totalCount, dataCount));\n    }\n  }\n  return list;\n};\nQRRSBlock.getRsBlockTable = function (typeNumber, errorCorrectLevel) {\n  switch (errorCorrectLevel) {\n    case ECL.L:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n    case ECL.M:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n    case ECL.Q:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n    case ECL.H:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n    default:\n      return undefined;\n  }\n};\nmodule.exports = QRRSBlock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qr.js/lib/RSBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qr.js/lib/math.js":
/*!****************************************!*\
  !*** ./node_modules/qr.js/lib/math.js ***!
  \****************************************/
/***/ ((module) => {

eval("var QRMath = {\n  glog: function (n) {\n    if (n < 1) {\n      throw new Error(\"glog(\" + n + \")\");\n    }\n    return QRMath.LOG_TABLE[n];\n  },\n  gexp: function (n) {\n    while (n < 0) {\n      n += 255;\n    }\n    while (n >= 256) {\n      n -= 255;\n    }\n    return QRMath.EXP_TABLE[n];\n  },\n  EXP_TABLE: new Array(256),\n  LOG_TABLE: new Array(256)\n};\nfor (var i = 0; i < 8; i++) {\n  QRMath.EXP_TABLE[i] = 1 << i;\n}\nfor (var i = 8; i < 256; i++) {\n  QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n}\nfor (var i = 0; i < 255; i++) {\n  QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n}\nmodule.exports = QRMath;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXIuanMvbGliL21hdGguanMiLCJuYW1lcyI6WyJRUk1hdGgiLCJnbG9nIiwibiIsIkVycm9yIiwiTE9HX1RBQkxFIiwiZ2V4cCIsIkVYUF9UQUJMRSIsIkFycmF5IiwiaSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL2tpaW1zLWtpb3NrLy4vbm9kZV9tb2R1bGVzL3FyLmpzL2xpYi9tYXRoLmpzPzUxOGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFFSTWF0aCA9IHtcblxuXHRnbG9nIDogZnVuY3Rpb24obikge1xuXHRcblx0XHRpZiAobiA8IDEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImdsb2coXCIgKyBuICsgXCIpXCIpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gUVJNYXRoLkxPR19UQUJMRVtuXTtcblx0fSxcblx0XG5cdGdleHAgOiBmdW5jdGlvbihuKSB7XG5cdFxuXHRcdHdoaWxlIChuIDwgMCkge1xuXHRcdFx0biArPSAyNTU7XG5cdFx0fVxuXHRcblx0XHR3aGlsZSAobiA+PSAyNTYpIHtcblx0XHRcdG4gLT0gMjU1O1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIFFSTWF0aC5FWFBfVEFCTEVbbl07XG5cdH0sXG5cdFxuXHRFWFBfVEFCTEUgOiBuZXcgQXJyYXkoMjU2KSxcblx0XG5cdExPR19UQUJMRSA6IG5ldyBBcnJheSgyNTYpXG5cbn07XG5cdFxuZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0UVJNYXRoLkVYUF9UQUJMRVtpXSA9IDEgPDwgaTtcbn1cbmZvciAodmFyIGkgPSA4OyBpIDwgMjU2OyBpKyspIHtcblx0UVJNYXRoLkVYUF9UQUJMRVtpXSA9IFFSTWF0aC5FWFBfVEFCTEVbaSAtIDRdXG5cdFx0XiBRUk1hdGguRVhQX1RBQkxFW2kgLSA1XVxuXHRcdF4gUVJNYXRoLkVYUF9UQUJMRVtpIC0gNl1cblx0XHReIFFSTWF0aC5FWFBfVEFCTEVbaSAtIDhdO1xufVxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTU7IGkrKykge1xuXHRRUk1hdGguTE9HX1RBQkxFW1FSTWF0aC5FWFBfVEFCTEVbaV0gXSA9IGk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUVJNYXRoO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxNQUFNLEdBQUc7RUFFWkMsSUFBSSxFQUFHLFNBQUFBLENBQVNDLENBQUMsRUFBRTtJQUVsQixJQUFJQSxDQUFDLEdBQUcsQ0FBQyxFQUFFO01BQ1YsTUFBTSxJQUFJQyxLQUFLLENBQUMsT0FBTyxHQUFHRCxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ25DO0lBRUEsT0FBT0YsTUFBTSxDQUFDSSxTQUFTLENBQUNGLENBQUMsQ0FBQztFQUMzQixDQUFDO0VBRURHLElBQUksRUFBRyxTQUFBQSxDQUFTSCxDQUFDLEVBQUU7SUFFbEIsT0FBT0EsQ0FBQyxHQUFHLENBQUMsRUFBRTtNQUNiQSxDQUFDLElBQUksR0FBRztJQUNUO0lBRUEsT0FBT0EsQ0FBQyxJQUFJLEdBQUcsRUFBRTtNQUNoQkEsQ0FBQyxJQUFJLEdBQUc7SUFDVDtJQUVBLE9BQU9GLE1BQU0sQ0FBQ00sU0FBUyxDQUFDSixDQUFDLENBQUM7RUFDM0IsQ0FBQztFQUVESSxTQUFTLEVBQUcsSUFBSUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztFQUUxQkgsU0FBUyxFQUFHLElBQUlHLEtBQUssQ0FBQyxHQUFHO0FBRTFCLENBQUM7QUFFRCxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFFO0VBQzNCUixNQUFNLENBQUNNLFNBQVMsQ0FBQ0UsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJQSxDQUFDO0FBQzdCO0FBQ0EsS0FBSyxJQUFJQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsR0FBRyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtFQUM3QlIsTUFBTSxDQUFDTSxTQUFTLENBQUNFLENBQUMsQ0FBQyxHQUFHUixNQUFNLENBQUNNLFNBQVMsQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUMxQ1IsTUFBTSxDQUFDTSxTQUFTLENBQUNFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FDdkJSLE1BQU0sQ0FBQ00sU0FBUyxDQUFDRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQ3ZCUixNQUFNLENBQUNNLFNBQVMsQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzQjtBQUNBLEtBQUssSUFBSUEsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEdBQUcsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7RUFDN0JSLE1BQU0sQ0FBQ0ksU0FBUyxDQUFDSixNQUFNLENBQUNNLFNBQVMsQ0FBQ0UsQ0FBQyxDQUFDLENBQUUsR0FBR0EsQ0FBQztBQUMzQztBQUVBQyxNQUFNLENBQUNDLE9BQU8sR0FBR1YsTUFBTSJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qr.js/lib/math.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qr.js/lib/mode.js":
/*!****************************************!*\
  !*** ./node_modules/qr.js/lib/mode.js ***!
  \****************************************/
/***/ ((module) => {

eval("module.exports = {\n  MODE_NUMBER: 1 << 0,\n  MODE_ALPHA_NUM: 1 << 1,\n  MODE_8BIT_BYTE: 1 << 2,\n  MODE_KANJI: 1 << 3\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXIuanMvbGliL21vZGUuanMiLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiTU9ERV9OVU1CRVIiLCJNT0RFX0FMUEhBX05VTSIsIk1PREVfOEJJVF9CWVRFIiwiTU9ERV9LQU5KSSJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2lpbXMta2lvc2svLi9ub2RlX21vZHVsZXMvcXIuanMvbGliL21vZGUuanM/NzVhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcblx0TU9ERV9OVU1CRVIgOlx0XHQxIDw8IDAsXG5cdE1PREVfQUxQSEFfTlVNIDogXHQxIDw8IDEsXG5cdE1PREVfOEJJVF9CWVRFIDogXHQxIDw8IDIsXG5cdE1PREVfS0FOSkkgOlx0XHQxIDw8IDNcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNoQkMsV0FBVyxFQUFJLENBQUMsSUFBSSxDQUFDO0VBQ3JCQyxjQUFjLEVBQUksQ0FBQyxJQUFJLENBQUM7RUFDeEJDLGNBQWMsRUFBSSxDQUFDLElBQUksQ0FBQztFQUN4QkMsVUFBVSxFQUFJLENBQUMsSUFBSTtBQUNwQixDQUFDIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qr.js/lib/mode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qr.js/lib/util.js":
/*!****************************************!*\
  !*** ./node_modules/qr.js/lib/util.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/qr.js/lib/mode.js\");\nvar Polynomial = __webpack_require__(/*! ./Polynomial */ \"(ssr)/./node_modules/qr.js/lib/Polynomial.js\");\nvar math = __webpack_require__(/*! ./math */ \"(ssr)/./node_modules/qr.js/lib/math.js\");\nvar QRMaskPattern = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n};\nvar QRUtil = {\n  PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],\n  G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n  G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n  G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n  getBCHTypeInfo: function (data) {\n    var d = data << 10;\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n      d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n    }\n    return (data << 10 | d) ^ QRUtil.G15_MASK;\n  },\n  getBCHTypeNumber: function (data) {\n    var d = data << 12;\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n      d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n    }\n    return data << 12 | d;\n  },\n  getBCHDigit: function (data) {\n    var digit = 0;\n    while (data != 0) {\n      digit++;\n      data >>>= 1;\n    }\n    return digit;\n  },\n  getPatternPosition: function (typeNumber) {\n    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n  },\n  getMask: function (maskPattern, i, j) {\n    switch (maskPattern) {\n      case QRMaskPattern.PATTERN000:\n        return (i + j) % 2 == 0;\n      case QRMaskPattern.PATTERN001:\n        return i % 2 == 0;\n      case QRMaskPattern.PATTERN010:\n        return j % 3 == 0;\n      case QRMaskPattern.PATTERN011:\n        return (i + j) % 3 == 0;\n      case QRMaskPattern.PATTERN100:\n        return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n      case QRMaskPattern.PATTERN101:\n        return i * j % 2 + i * j % 3 == 0;\n      case QRMaskPattern.PATTERN110:\n        return (i * j % 2 + i * j % 3) % 2 == 0;\n      case QRMaskPattern.PATTERN111:\n        return (i * j % 3 + (i + j) % 2) % 2 == 0;\n      default:\n        throw new Error(\"bad maskPattern:\" + maskPattern);\n    }\n  },\n  getErrorCorrectPolynomial: function (errorCorrectLength) {\n    var a = new Polynomial([1], 0);\n    for (var i = 0; i < errorCorrectLength; i++) {\n      a = a.multiply(new Polynomial([1, math.gexp(i)], 0));\n    }\n    return a;\n  },\n  getLengthInBits: function (mode, type) {\n    if (1 <= type && type < 10) {\n      // 1 - 9\n\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 10;\n        case Mode.MODE_ALPHA_NUM:\n          return 9;\n        case Mode.MODE_8BIT_BYTE:\n          return 8;\n        case Mode.MODE_KANJI:\n          return 8;\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else if (type < 27) {\n      // 10 - 26\n\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 12;\n        case Mode.MODE_ALPHA_NUM:\n          return 11;\n        case Mode.MODE_8BIT_BYTE:\n          return 16;\n        case Mode.MODE_KANJI:\n          return 10;\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else if (type < 41) {\n      // 27 - 40\n\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 14;\n        case Mode.MODE_ALPHA_NUM:\n          return 13;\n        case Mode.MODE_8BIT_BYTE:\n          return 16;\n        case Mode.MODE_KANJI:\n          return 12;\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else {\n      throw new Error(\"type:\" + type);\n    }\n  },\n  getLostPoint: function (qrCode) {\n    var moduleCount = qrCode.getModuleCount();\n    var lostPoint = 0;\n\n    // LEVEL1\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount; col++) {\n        var sameCount = 0;\n        var dark = qrCode.isDark(row, col);\n        for (var r = -1; r <= 1; r++) {\n          if (row + r < 0 || moduleCount <= row + r) {\n            continue;\n          }\n          for (var c = -1; c <= 1; c++) {\n            if (col + c < 0 || moduleCount <= col + c) {\n              continue;\n            }\n            if (r == 0 && c == 0) {\n              continue;\n            }\n            if (dark == qrCode.isDark(row + r, col + c)) {\n              sameCount++;\n            }\n          }\n        }\n        if (sameCount > 5) {\n          lostPoint += 3 + sameCount - 5;\n        }\n      }\n    }\n\n    // LEVEL2\n\n    for (var row = 0; row < moduleCount - 1; row++) {\n      for (var col = 0; col < moduleCount - 1; col++) {\n        var count = 0;\n        if (qrCode.isDark(row, col)) count++;\n        if (qrCode.isDark(row + 1, col)) count++;\n        if (qrCode.isDark(row, col + 1)) count++;\n        if (qrCode.isDark(row + 1, col + 1)) count++;\n        if (count == 0 || count == 4) {\n          lostPoint += 3;\n        }\n      }\n    }\n\n    // LEVEL3\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount - 6; col++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {\n          lostPoint += 40;\n        }\n      }\n    }\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount - 6; row++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    // LEVEL4\n\n    var darkCount = 0;\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount; row++) {\n        if (qrCode.isDark(row, col)) {\n          darkCount++;\n        }\n      }\n    }\n    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n    lostPoint += ratio * 10;\n    return lostPoint;\n  }\n};\nmodule.exports = QRUtil;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qr.js/lib/util.js\n");

/***/ })

};
;